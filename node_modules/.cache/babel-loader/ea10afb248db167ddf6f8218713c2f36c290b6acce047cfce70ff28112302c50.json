{"ast":null,"code":"var _jsxFileName = \"/home/jbj/front/src/components/MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropertyList from './PropertyList';\nimport KakaoMap from './KakaoMap';\nimport './MapView.css';\n\n//const API_URL = 'https://2094-165-229-229-106.ngrok-free.app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8080'; // 로컬 개발용\n\nconst MapView = ({\n  user\n}) => {\n  _s();\n  const [properties, setProperties] = useState([]);\n  const propertyListRef = useRef();\n\n  // 1️⃣ PropertyList와 동일한 fetchProperties 함수\n  const fetchProperties = async () => {\n    try {\n      const res = await fetch(`${API_URL}/properties?user=admin`);\n      const data = await res.json();\n      setProperties(Array.isArray(data.properties) ? data.properties : data);\n    } catch (e) {\n      setProperties([]);\n    }\n  };\n  useEffect(() => {\n    fetchProperties();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mapview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapview-map\",\n      children: /*#__PURE__*/_jsxDEV(KakaoMap, {\n        properties: properties\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapview-list\",\n      children: /*#__PURE__*/_jsxDEV(PropertyList, {\n        ref: propertyListRef,\n        user: user,\n        mode: \"all\"\n        // PropertyList가 내부적으로 fetchProperties를 쓴다면, 따로 setProperties는 안 건드려도 됨\n        // properties={properties} // (만약 PropertyList를 props 기반으로 리팩토링하면 추가)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"mJ6GFkTpFZ9aT5l69NKaWt88OQ0=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useRef","PropertyList","KakaoMap","jsxDEV","_jsxDEV","API_URL","MapView","user","_s","properties","setProperties","propertyListRef","fetchProperties","res","fetch","data","json","Array","isArray","e","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","mode","_c","$RefreshReg$"],"sources":["/home/jbj/front/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropertyList from './PropertyList';\nimport KakaoMap from './KakaoMap';\nimport './MapView.css';\n\n//const API_URL = 'https://2094-165-229-229-106.ngrok-free.app';\nconst API_URL = 'http://localhost:8080'; // 로컬 개발용\n\nconst MapView = ({ user }) => {\n  const [properties, setProperties] = useState([]);\n  const propertyListRef = useRef();\n\n  // 1️⃣ PropertyList와 동일한 fetchProperties 함수\n  const fetchProperties = async () => {\n    try {\n      const res = await fetch(`${API_URL}/properties?user=admin`);\n      const data = await res.json();\n      setProperties(Array.isArray(data.properties) ? data.properties : data);\n    } catch (e) {\n      setProperties([]);\n    }\n  };\n\n  useEffect(() => {\n    fetchProperties();\n  }, []);\n\n  return (\n    <div className=\"mapview-container\">\n      <div className=\"mapview-map\">\n        {/* 2️⃣ PropertyList에서 받아온 properties를 KakaoMap에도 그대로 전달 */}\n        <KakaoMap properties={properties} />\n      </div>\n      <div className=\"mapview-list\">\n        <PropertyList\n          ref={propertyListRef}\n          user={user}\n          mode=\"all\"\n        // PropertyList가 내부적으로 fetchProperties를 쓴다면, 따로 setProperties는 안 건드려도 됨\n        // properties={properties} // (만약 PropertyList를 props 기반으로 리팩토링하면 추가)\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MapView;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMY,eAAe,GAAGX,MAAM,CAAC,CAAC;;EAEhC;EACA,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,wBAAwB,CAAC;MAC3D,MAAMU,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7BN,aAAa,CAACO,KAAK,CAACC,OAAO,CAACH,IAAI,CAACN,UAAU,CAAC,GAAGM,IAAI,CAACN,UAAU,GAAGM,IAAI,CAAC;IACxE,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVT,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdc,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAKgB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCjB,OAAA;MAAKgB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAE1BjB,OAAA,CAACF,QAAQ;QAACO,UAAU,EAAEA;MAAW;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACNrB,OAAA;MAAKgB,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3BjB,OAAA,CAACH,YAAY;QACXyB,GAAG,EAAEf,eAAgB;QACrBJ,IAAI,EAAEA,IAAK;QACXoB,IAAI,EAAC;QACP;QACA;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CApCIF,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAsCb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}